@model Insurance.ViewModels.UserEditModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var photoPath = (string.IsNullOrEmpty(Model.ExistingPhotoPath) ? "/Content/images/avtar.png" : "/Content/userProfile/" + Model.ExistingPhotoPath);
}

<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <h1>
            Edit
            <small>User</small>
        </h1>
        <ol class="breadcrumb">
            <li><a href="#"><i class="fa fa-dashboard"></i> User Management</a></li>
            <li><a href="#">Manage User</a></li>
            <li class="active">Edit</li>
        </ol>
    </section>
    <section class="content">
        <div class="box">
            <div class="box-body">
                @using (Html.BeginForm("Edit", "ManageUser", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    <div class="panel panel-primary">
                        <div class="panel-heading">Primary Details</div>
                        <div class="panel-body">
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(x => x.Id, new { id = Model.Id })
                            @Html.HiddenFor(x => x.ExistingPhotoPath, new { id = Model.ExistingPhotoPath })
                            @Html.HiddenFor(x => x.Email, new { id = Model.Email })

                            <div class="form-group row">
                                <div class="form-group col-md-4">
                                    <img src="@photoPath" style="height: 200px; width: 240px;" class="imageThumbnail" asp-append-version="true" />
                                </div>
                                <div class="form-group col-md-8">
                                    <div class="form-group row">
                                        <div class="form-group col-md-12">
                                            @Html.EditorFor(m => m.file, new { htmlAttributes = new { @class = "form-control", @type = "file" } })
                                            @Html.ValidationMessageFor(a => a.file, string.Empty, new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="form-group col-md-6">
                                            @Html.TextBoxFor(m => m.FullName_en, new { @class = "form-control", @type = "Name", @placeholder = "Full Name_en" })
                                            @Html.ValidationMessageFor(model => model.FullName_en, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="form-group col-md-6">
                                            @Html.TextBoxFor(m => m.FullName_local, new { @class = "form-control", @type = "Name", @placeholder = "Full Name_local" })
                                            @Html.ValidationMessageFor(model => model.FullName_local, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="form-group col-md-6">
                                            @Html.DropDownListFor(m => m.Gender, Model.GenderList, "Choose...", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="form-group col-md-6">
                                            @*@Html.LabelFor(model => model.Email, new { @class = "form-group" })*@
                                            @Html.LabelFor(m => m.Email, Model.Email, new { @class = "form-control", @type = "Name", @placeholder = "Email" })
                                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="form-group col-md-6">
                                            @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control", @type = "Name", @placeholder = "Mobile" })
                                            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel-heading mt-0">Additional Details</div>
                        <div class="panel-body">
                            <div class="form-group row">
                                <div class="form-group col-sm-6">
                                    @*@Html.LabelFor(model => model.SpecialityIDs)*@
                                    @Html.DropDownListFor(m => m.InsuranceTypeId, Model.InsuranceType, "Select Insurance", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.InsuranceTypeId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="form-group col-sm-12">
                                    @*@Html.LabelFor(m => m.AboutDoctor, new { })*@
                                    @Html.TextAreaFor(m => m.Interest_en, new { @class = "form-control", @type = "text", @placeholder = "About Interest_en" })
                                    @Html.ValidationMessageFor(a => a.Interest_en, string.Empty, new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="form-group col-sm-12">
                                    @*@Html.LabelFor(m => m.AboutDoctor, new { })*@
                                    @Html.TextAreaFor(m => m.Interest_local, new { @class = "form-control", @type = "text", @placeholder = "About Interest_local" })
                                    @Html.ValidationMessageFor(a => a.Interest_local, string.Empty, new { @class = "text-danger" })
                                </div>
                            </div>
                            @Html.ValidationSummary(false, string.Empty, new { @class = "text-danger" })
                            <div class="form-group row">
                                <div class="form-group col-sm-6">
                                    <button type="submit" class="btn btn-primary">Submit</button>
                                    <a href="/ManageUser/Index" class="btn btn-danger">Cancel</a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

    </section>
</div>

@section Scripts
{
    <script type="text/javascript">
        $(document).ready(function () {
            //Timepicker
            $("#file").change(function () {
                // Get uploaded file extension
                var extension = $(this).val().split('.').pop().toLowerCase();
                // Create array with the files extensions that we wish to upload
                var validFileExtensions = ['jpeg', 'jpg', 'png', 'gif', 'bmp'];
                //Check file extension in the array.if -1 that means the file extension is not in the list.
                if ($.inArray(extension, validFileExtensions) == -1) {
                    //$('#spnmsg').text("Failed!! Please upload jpg, jpeg, png, gif, bmp file only.").show();
                    swal("Failed!! Please upload jpg, jpeg, png, gif, bmp file only.");
                    // Clear fileuload control selected file
                    $(this).replaceWith($(this).val('').clone(true));
                    //Disable Submit Button
                    $('#btnUpdate').prop('disabled', true);
                }
                else {
                    // Check and restrict the file size to 51 KB. (1000 byte = 1Kb)
                    if ($(this).get(0).files[0].size > (51000)) {
                        swal("Failed!! Max allowed file size is 50 kb");
                        // Clear fileuload control selected file
                        $(this).replaceWith($(this).val('').clone(true));
                        //Disable Submit Button
                        $('#btnUpdate').prop('disabled', true);
                    }
                    else {
                        //Clear and Hide message span
                        //$('#spnmsg').text('').hide();
                        //Enable Submit Button
                        $('#btnUpdate').prop('disabled', false);
                    }
                }
            });

        });
    </script>
}